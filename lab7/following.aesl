var velocity = 200
var i
var temp
var max_value
var current_value
var even_circle_light_value = 6
var odd_circle_light_value = 18
var r = 32
var g = 0
var b = 0
var phase = 0

#timer.period[0]=200
timer.period[1] = 100  # update every 100 ms

sub rotate_right
	motor.left.target = velocity
    motor.right.target = -velocity
	return

sub rotate_left
	motor.left.target = -velocity
    motor.right.target = velocity
	return

sub go_forward
    motor.left.target = velocity
    motor.right.target = velocity
	return

sub go_backward
    motor.left.target = -velocity
    motor.right.target = -velocity
	return

sub stop
	motor.left.target = 0
   	motor.right.target = 0
	return

onevent prox
	
	 max_value = prox.horizontal[0]
    for i in 1:4 do
	   current_value = prox.horizontal[i]
       if current_value > max_value then
            max_value = current_value
       end
	end
	
	if max_value > 200 and  max_value == prox.horizontal[0] then
		callsub rotate_left
	elseif max_value > 200 and  max_value == prox.horizontal[4] then
		callsub rotate_right
	elseif max_value > 200 and max_value < 2500 then
		callsub go_forward	
	elseif  max_value > 3000 then
		callsub go_backward
	else 
		callsub stop	
	end  

onevent timer1
    callsub update_color

sub update_color
    # Always keep green at full intensity
    g = 32

    if phase == 0 then
        r -= 1
        b += 1
        if r <= 0 then
            r = 0
            b = 32
            phase = 1
        end
    elseif phase == 1 then
        r += 1
        b -= 1
        if r >= 32 then
            r = 32
            b = 0
            phase = 0
        end
    end

    call leds.top(r, g, b)
	return
#onevent timer0
#	temp = even_circle_light_value
#	even_circle_light_value = odd_circle_light_value
#	odd_circle_light_value = temp
#	leds.circle = [even_circle_light_value, odd_circle_light_value,even_circle_light_value, odd_circle_light_value,even_circle_light_value, odd_circle_light_value, 	  				even_circle_light_value, odd_circle_light_value]
onevent button.center
	
    callsub go_forward